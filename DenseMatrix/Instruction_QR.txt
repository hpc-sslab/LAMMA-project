
1/ Set environment

KNL environment:
	module add craype-mic-knl

SKL environment:
	module add craype-x86-skylake

Intel and MPI environment:
	module add intel/19.0.5 impi/19.0.5

2/ Installation
ScaLAPACK can be installed with make. The configuration must be set in the SLmake.inc file. A SLmake.inc.example for a Linux machine running GNU compilers is given in the main directory. 
  
a/ Firstly, you need to copy SLmake.in.example to SLmake.inc. In SLmake.inc file, you need to modify:

+ The fortran and C compilers, loaders, and their flags as below,
   On KNL:
	FC            = mpiifort
	CC            = mpiicc
	NOOPT         = -O0
	FCFLAGS       = -O3 -qopenmp -xMIC-AVX512 $(MY_FLAGS)
	CCFLAGS       = -O3 -qopenmp -xMIC-AVX512 $(MY_FLAGS)

   On SKL:
	FC            = mpiifort
	CC            = mpiicc
	NOOPT         = -O0
	FCFLAGS       = -O3 -qopenmp -xCORE-AVX512 $(MY_FLAGS)
	CCFLAGS       = -O3 -qopenmp -xCORE-AVX512 $(MY_FLAGS)

+ BLAS, LAPACK (and possibly other) libraries needed for linking test programs
   BLASLIB       =  -L$(MKLLIB)/ -lmkl_gf_lp64 -lmkl_sequential -lmkl_blas95_lp64 -lgfortran     -lmkl_core  -lmemkind $locate_of_memkind_library_on your_computer
   LAPACKLIB      = -L$(MKLLIB)/ -lmkl_lapack95_ilp64

b/ Add zerodgemm routine in libscalapack.a
+ Define zerodgemm in PBLAS/SRC/PBblas.h file
+ Make object file: zerodgemm.o
+ Add object file to library: ar -crv libscalapack.a userdgemm.o
+ Modify dgemm routine in file SRC/pdlarfb.f with case "Transpose", "No transpose", and beta=0 to zerodgemm

c/ Add userdgemm routine in libscalapack.a
+ Define userdgemm in PBLAS/SRC/PBblas.h file
+ Make object file: userdgemm.o
+ Add object file to library: ar -crv libscalapack.a userdgemm.o
+ Modify dgemm routine in file SRC/pdlarfb.f with case "No transpose", "Transpose" to userdgemm


3/ Submit a job on NURION
a/ KNL environment
	#!/bin/bash
	#PBS -V
	#PBS -N TEST
	#PBS -q normal
	#PBS -A etc
	#PBS -l walltime=06:00:00
	#PBS -l select=4:ncpus=68:mpiprocs=1:ompthreads=68

b/ SKL environment
	#!/bin/bash
	#PBS -V
	#PBS -N TEST
	#PBS -q norm_skl
	#PBS -A etc
	#PBS -l walltime=06:00:00
	#PBS -l select=4:ncpus=40:mpiprocs=1:ompthreads=40


4/ Testing
a/ Create random matrix
	void row_major_matrix(double      *mm,
                      const int    nrow,
                      const int    ncol,
                      const int    seed,
                      const double lb,
                      const double rb)
	{
 	 int i;
 	 VSLStreamStatePtr stm;
  
  	vslNewStream(&stm, VSL_BRNG_MT19937, seed);
  	#pragma ivdep
  	for(i = 0; i < nrow; ++i)
  	{
   		 vdRngUniform(VSL_RNG_METHOD_UNIFORM_STD_ACCURATE,stm,ncol,&mm[i*ncol],lb,rb);
  	}
 	 vslDeleteStream(&stm);
	}

b/ Test file
int main(int argc, char **argv) {
   int i, j, k;
   int myrank_mpi, nprocs_mpi;
   int ictxt, nprow, npcol, myrow, mycol;
   int info,itemp;
   int ZERO=0,ONE=1;
   double norm;
   nprow = 2; npcol = 2; 
   int M=20000;
   int K=20000;
   int nb = 24;

   const int i_zero=0, i_one=1, i_four=4, i_negone=-1;
   blacs_pinfo_( &myrank_mpi, &nprocs_mpi ) ;
   blacs_get_( &i_negone, &i_zero, &ictxt );
   blacs_gridinit_( &ictxt, "R", &nprow, &npcol );
   blacs_gridinfo_( &ictxt, &nprow, &npcol, &myrow, &mycol );

   int rA = numroc_( &M, &nb, &myrow, &ZERO, &nprow );
   int cA = numroc_( &K, &nb, &mycol, &ZERO, &npcol );
   double sizeQuery;
   int lwork;
   int minus1 = -1;
   int descA[9];
   descinit_(descA, &M,   &K,   &nb,  &nb,  &ZERO, &ZERO, &ictxt, &rA,  &info);

   double *A = (double *) hbw_malloc(sizeof(double)*rA*cA);
   hbw_posix_memalign((void *) A, 64, sizeof(double)*rA*cA);
   double *tau = (double*)hbw_malloc(cA*sizeof(double));
   hbw_posix_memalign((void *) tau, 64, sizeof(double)*cA);

   pdgeqrf_(&M, &K, A, &ONE, &ONE, descA, tau, &sizeQuery, &minus1, &info);

   lwork = sizeQuery;
   double *work = (double*)hbw_malloc(lwork*sizeof(double));
   hbw_posix_memalign((void *) work, 64, sizeof(double)*lwork);

   double alpha = 1.0; double beta = 1.0;	
   double start, end, flops;

   srand(time(NULL));
   int randa = 999 + npcol*myrow + mycol;
   row_major_matrix(&A[0], rA, cA, randa,  -1.0,  1.0);
	
   for(i=0;i<3;i++){
     Cblacs_barrier(ictxt, "All");
	 start=MPI_Wtime();

	 pdgeqrf_(&M, &K, A, &ONE, &ONE, descA, tau, work, &lwork, &info);
 
	 Cblacs_barrier(ictxt, "All");
     end=MPI_Wtime();
	double duration = (double)(end - start); 
	 if (myrow==0 && mycol==0)
	 {
	    printf("%f Gigaflops\n", ((double)4 *(double)K *(double)K * (double)K  / (double)3) * 1.0e-9 / duration);
		
	 }
	}
   hbw_free(A);
   hbw_free(tau);
   hbw_free(work);
   Cblacs_gridexit( 0 );
   MPI_Finalize();
   return 0;
}


c/ Makefile
+ On SKL:
	 mpiicc testfile.c -O3 -qopenmp -mkl  -xCORE-AVX512 -restrict \
                      -o testfile  -lifcore -lmkl_blacs_intelmpi_lp64   $path_to_ScaLAPACK_libray/libscalapack.a   
              mpirun  -np 4 ./testfile >> result.txt

+ On KNL:
	 mpiicc testfile -O3 -qopenmp $path_to_high_bandwidth_memory -lmemkind -mkl  -xMIC-AVX512 -restrict \
                      -o testfile  -lifcore    $path_to_ScaLAPACK_libray/libscalapack.a
           mpirun  -np 4 ./testfile >> result.txt


