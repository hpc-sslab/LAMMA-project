
1/ Set environment

KNL environment:
	module add craype-mic-knl

SKL environment:
	module add craype-x86-skylake

Intel and MPI environment:
	module add intel/19.0.5 impi/19.0.5

2/ Installation
ScaLAPACK can be installed with make. The configuration must be set in the SLmake.inc file. A SLmake.inc.example for a Linux machine running GNU compilers is given in the main directory. 
  
a/ Firstly, you need to copy SLmake.in.example to SLmake.inc. In SLmake.inc file, you need to modify:

+ The fortran and C compilers, loaders, and their flags as below,
   On KNL:
	FC            = mpiifort
	CC            = mpiicc
	NOOPT         = -O0
	FCFLAGS       = -O3 -qopenmp -xMIC-AVX512 $(MY_FLAGS)
	CCFLAGS       = -O3 -qopenmp -xMIC-AVX512 $(MY_FLAGS)

   On SKL:
	FC            = mpiifort
	CC            = mpiicc
	NOOPT         = -O0
	FCFLAGS       = -O3 -qopenmp -xCORE-AVX512 $(MY_FLAGS)
	CCFLAGS       = -O3 -qopenmp -xCORE-AVX512 $(MY_FLAGS)

+ BLAS, LAPACK (and possibly other) libraries needed for linking test programs
   BLASLIB       =  -L$(MKLLIB)/ -lmkl_gf_lp64 -lmkl_sequential -lmkl_blas95_lp64 -lgfortran     -lmkl_core  -lmemkind $locate_of_memkind_library_on your_computer
   LAPACKLIB      = -L$(MKLLIB)/ -lmkl_lapack95_ilp64

b/ Add userdgemm routine in libscalapack.a
+ Define userdgemm in PBLAS/SRC/PBblas.h file
+ Make object file: userdgemm.o
+ Add object file to library: ar -crv libscalapack.a userdgemm.o
+ Modify dgemm routine in PBLAS/SRC/PTOOL/PB_Cdtypeset.c to userdgemm

c/ Add BLAS 1 routine in libscalapack.a
+ Define avxdscal, avxdswap, and avxdcopy in PBLAS/SRC/PBblas.h file
+ Make object file: avxdscal.o, avxdswap.o, and avxdcopy.o
+ Add object file to library: ar -crv libscalapack.a avxdscal.o avxdswap.o avxdcopy.o
+ Modify dscal, dswap, and dcopy routine in PBLAS/SRC/PTOOL/PB_Cdtypeset.c to avxdscal, avxdswap, and avxdcopy, respectively.

d/ Modify value of pilaenv.f
	On KNL and SKL, the value in pilaenv.f file need to set as 300.

3/ Submit a job on NURION
a/ KNL environment
	#!/bin/bash
	#PBS -V
	#PBS -N TEST
	#PBS -q normal
	#PBS -A etc
	#PBS -l walltime=06:00:00
	#PBS -l select=4:ncpus=68:mpiprocs=1:ompthreads=68

b/ SKL environment
	#!/bin/bash
	#PBS -V
	#PBS -N TEST
	#PBS -q norm_skl
	#PBS -A etc
	#PBS -l walltime=06:00:00
	#PBS -l select=4:ncpus=40:mpiprocs=1:ompthreads=40


4/ Testing
a/ Create random matrix
	void row_major_matrix(double      *mm,
                      const int    nrow,
                      const int    ncol,
                      const int    seed,
                      const double lb,
                      const double rb)
	{
 	 int i;
 	 VSLStreamStatePtr stm;
  
  	vslNewStream(&stm, VSL_BRNG_MT19937, seed);
  	#pragma ivdep
  	for(i = 0; i < nrow; ++i)
  	{
   		 vdRngUniform(VSL_RNG_METHOD_UNIFORM_STD_ACCURATE,stm,ncol,&mm[i*ncol],lb,rb);
  	}
 	 vslDeleteStream(&stm);
	}

b/ Test file
int main(int argc, char **argv) {
   int i, j, k;
   int myrank_mpi, nprocs_mpi;
   int ictxt, nprow, npcol, myrow, mycol;
   int info,itemp;
   int ZERO=0, ONE=1;
   double norm;
   nprow = 2; 
   npcol = 2; 
   int nb =336;
   int M=20000;
   int K=20000; 

   Cblacs_pinfo( &myrank_mpi, &nprocs_mpi ) ;
   Cblacs_get( -1, 0, &ictxt );
   Cblacs_gridinit( &ictxt, "Row", nprow, npcol );
   Cblacs_gridinfo( ictxt, &nprow, &npcol, &myrow, &mycol );

   int rA = numroc_( &M, &nb, &myrow, &ZERO, &nprow );
   int cA = numroc_( &K, &nb, &mycol, &ZERO, &npcol );

   double *A = (double *) hbw_malloc(sizeof(double)*rA*cA);
   hbw_posix_memalign((void *) A, 64, sizeof(double)*rA*cA);
     
   int descA[9];
   int *IPIV;
   IPIV = (int *)calloc(rA + nb, sizeof(int));
   descinit_(descA, &M,   &K,   &nb,  &nb,  &ZERO, &ZERO, &ictxt, &rA,  &info);

   double alpha = 1.0; double beta = 1.0;	
   double start, end, flops;

   srand(time(NULL));
   int randa = 999 + npcol*myrow + mycol;
   row_major_matrix(&A[0], rA, cA, randa,  -1.0,  1.0);

   for(j=0;j<4;j++)
   {
	MPI_Barrier(MPI_COMM_WORLD);
 	start=MPI_Wtime();
	 
	pdgetrf_(&M, &K, A, &ONE, &ONE, descA, IPIV, &info);

	MPI_Barrier(MPI_COMM_WORLD);
        end=MPI_Wtime();
	 
	double duration = (double)(end - start); 
	if (myrow==0 && mycol==0)
	{

              if (M > K)
	  {
	     printf("duration=%f\t PDGETRF=%f Gigaflops\n",duration, ((double)K * (double)K * (double)M - (double)K * (double)K * (double)K / (double)3) * 1.0e-9 / duration);
	  }
	  else if (K < M)
	  {
	     printf("duration=%f\t PDGETRF=%f Gigaflops\n",duration, ((double)M * (double)M * (double)K - (double)M * (double)M * (double)M / (double)3) * 1.0e-9 / duration);
              }
	  else
	  {
	     printf("duration=%f\t PDGETRF=%f Gigaflops\n",duration, ((double)2*(double)K *(double)K * (double)K  / (double)3) * 1.0e-9 / duration);
		
              }
	}
   }
   hbw_free(A);
   Cblacs_gridexit( 0 );
   MPI_Finalize();
   return 0;
}

c/ Makefile
+ On SKL:
	 mpiicc testfile.c -O3 -qopenmp -mkl  -xCORE-AVX512 -restrict \
                      -o testfile  -lifcore -lmkl_blacs_intelmpi_lp64   $path_to_ScaLAPACK_libray/libscalapack.a   
              mpirun  -np 4 ./testfile >> result.txt

+ On KNL:
	 mpiicc testfile -O3 -qopenmp $path_to_high_bandwidth_memory -lmemkind -mkl  -xMIC-AVX512 -restrict \
                      -o testfile  -lifcore    $path_to_ScaLAPACK_libray/libscalapack.a
           mpirun  -np 4 ./testfile >> result.txt


