
1/ Set environment

KNL environment:
	module add craype-mic-knl

SKL environment:
	module add craype-x86-skylake

Intel and MPI environment:
	module add intel/19.0.5 impi/19.0.5

2/ Installation
ScaLAPACK can be installed with make. The configuration must be set in the SLmake.inc file. A SLmake.inc.example for a Linux machine running GNU compilers is given in the main directory. 
  
a/ Firstly, you need to copy SLmake.in.example to SLmake.inc. In SLmake.inc file, you need to modify:

+ The fortran and C compilers, loaders, and their flags as below,
   On KNL:
	FC            = mpiifort
	CC            = mpiicc
	NOOPT         = -O0
	FCFLAGS       = -O3 -qopenmp -xMIC-AVX512 $(MY_FLAGS)
	CCFLAGS       = -O3 -qopenmp -xMIC-AVX512 $(MY_FLAGS)

   On SKL:
	FC            = mpiifort
	CC            = mpiicc
	NOOPT         = -O0
	FCFLAGS       = -O3 -qopenmp -xCORE-AVX512 $(MY_FLAGS)
	CCFLAGS       = -O3 -qopenmp -xCORE-AVX512 $(MY_FLAGS)

+ BLAS, LAPACK (and possibly other) libraries needed for linking test programs
   BLASLIB       =  -L$(MKLLIB)/ -lmkl_gf_lp64 -lmkl_sequential -lmkl_blas95_lp64 -lgfortran     -lmkl_core  -lmemkind $locate_of_memkind_library_on your_computer
   LAPACKLIB      = -L$(MKLLIB)/ -lmkl_lapack95_ilp64

b/ Add zerodgemm routine in libscalapack.a
+ Define zerodgemm in PBLAS/SRC/PBblas.h file
+ Make object file: zerodgemm.o
+ Add object file to library: ar -crv libscalapack.a userdgemm.o
+ Modify gemm_ routine in file /PBLAS/SRC/PTOOLS/PB_CpsyrkAC.c with case "No transpose", "Transpose", and beta=0 to zerodgemm

c/ Add userdgemm routine in libscalapack.a
+ Define userdgemm in PBLAS/SRC/PBblas.h file
+ Make object file: userdgemm.o
+ Add object file to library: ar -crv libscalapack.a userdgemm.o
+ Modify gemm_ routine in file /PBLAS/SRC/PTOOLS/PB_CptrsmAB0.c, PB_Ctzsyrk.c, PB_CpsyrkA.c with case "No transpose", "No transpose" to userdgemm

d/ Modify value of pilaenv.f
	On KNL and SKL, the value in pilaenv.f file need to set as 336 and 304, respectively.

3/ Submit a job on NURION
a/ KNL environment
	#!/bin/bash
	#PBS -V
	#PBS -N TEST
	#PBS -q normal
	#PBS -A etc
	#PBS -l walltime=06:00:00
	#PBS -l select=4:ncpus=68:mpiprocs=1:ompthreads=68

b/ SKL environment
	#!/bin/bash
	#PBS -V
	#PBS -N TEST
	#PBS -q norm_skl
	#PBS -A etc
	#PBS -l walltime=06:00:00
	#PBS -l select=4:ncpus=40:mpiprocs=1:ompthreads=40


4/ Testing
a/ Test file
int main(int argc, char **argv) {
   int i, j;
   int myrank_mpi, nprocs_mpi;

   int ictxt, nprow, npcol, myrow, mycol;
   int info,itemp;
   int ZERO=0,ONE=1;
   double norm;
   nprow = 2; npcol = 2; 
   int M=20000;
   int K=20000;
   int nb = 336;

   const int i_zero=0, i_one=1, i_four=4, i_negone=-1;
   blacs_pinfo_( &myrank_mpi, &nprocs_mpi ) ;
   blacs_get_( &i_zero, &i_zero, &ictxt );
   blacs_gridinit_( &ictxt, "R", &nprow, &npcol );
   blacs_gridinfo_( &ictxt, &nprow, &npcol, &myrow, &mycol );

   int rA = numroc_( &M, &nb, &myrow, &ZERO, &nprow );
   int cA = numroc_( &K, &nb, &mycol, &ZERO, &npcol );

   char uplo='L';
   int descA[9];
   descinit_(descA, &M,   &K,   &nb,  &nb,  &ZERO, &ZERO, &ictxt, &rA,  &info);

   double *A = (double *) hbw_malloc(sizeof(double)*rA*cA);
   hbw_posix_memalign((void *) A, 64, sizeof(double)*rA*cA);
        
   double alpha = 1.0; double beta = 1.0;	
   double start, end, flops;
	
 int k = 0;
 for ( j = 0; j < cA; j++) { // local col
     int l_j = j / nb; // which block
     int x_j = j % nb; // where within that block
     int J   = (l_j * npcol + mycol) * nb + x_j; // global col
     for ( i = 0; i < rA; i++) { // local row
         int l_i = i / nb; // which block
         int x_i = i % nb; // where within that block
         int I   = (l_i * nprow + myrow) * nb + x_i; // global row

         if(I == J) {
             A[k] = M*M;
         } else {
             A[k] = I+J;
         }
         k++;
     }
 }	
	
   for(i=0;i<3;i++){
       
        Cblacs_barrier(ictxt, "All");
        start=MPI_Wtime();

	   pdpotrf_(&uplo, &M, A, &ONE, &ONE, descA, &info);
 
        Cblacs_barrier(ictxt, "All");
        end=MPI_Wtime();
   	   
        double duration = (double)(end - start); 
	   if (myrow==0 && mycol==0)
	   {
	      printf("%f Gigaflops\n", ((double)1 *(double)K *(double)K * (double)K  / (double)3) * 1.0e-9 / duration);
		
	   }
   }
   hbw_free(A);
   Cblacs_gridexit( 0 );
   MPI_Finalize();
   return 0;
}


b/ Makefile
+ On SKL:
	 mpiicc testfile.c -O3 -qopenmp -mkl  -xCORE-AVX512 -restrict \
                      -o testfile  -lifcore -lmkl_blacs_intelmpi_lp64   $path_to_ScaLAPACK_libray/libscalapack.a   
              mpirun  -np 4 ./testfile >> result.txt

+ On KNL:
	 mpiicc testfile -O3 -qopenmp $path_to_high_bandwidth_memory -lmemkind -mkl  -xMIC-AVX512 -restrict \
                      -o testfile  -lifcore    $path_to_ScaLAPACK_libray/libscalapack.a
           mpirun  -np 4 ./testfile >> result.txt


